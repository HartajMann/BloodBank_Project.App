@page "/Register"
@using BloodBank_Project.Data
<h3 style="text-align:center">Register Donor</h3>
<div class="row mt-5">
	<label class="form-label">Phone Number</label>
</div>
<div class="row mb-3">
	<div class="col-9"><input type="text" class="form-control" @bind="donor.PhoneNumber"></div>
	<div class="col-3"><button type="button" class="btn btn btn-dark" style="width:200px" @onclick="FetchData">Fetch Info</button></div>
</div>
<div class="row">
	<div class="col-6">
		<label class="form-label">Name</label>
	</div>
	<div class="col-6">
		<label class="form-label">Gender</label>
	</div>
</div>
<div class="row mb-3">
	<div class="col-6">
		<input type="text" class="form-control" @bind="donor.Name">
	</div>
	<div class="col-6">
		<input type="text" class="form-control" @bind="donor.Gender">
	</div>
</div>
<div class="row">
	<div class="col-9">
		<label class="form-label">Address</label>
	</div>
	<div class="col-3">
		<label class="form-label">City/Town</label>
	</div>
</div>
<div class="row mb-3">
	<div class="col-9">
		<input type="text" class="form-control" @bind="donor.Address">
	</div>
	<div class="col-3">
		<input type="text" class="form-control" @bind="donor.City">
	</div>
</div>
<div class="row"> <div class="col-12"><label f class="form-label">Blood Group</label></div></div>
<div class="row mb-3">
	<div class="col-12">
		<select class="form-select" aria-label="Default select example" @bind="donor.BloodGroup">
			<option value="">Select</option>
			<option value="O+">O+</option>
			<option value="O-">O-</option>
			<option value="AB+">AB+</option>
			<option value="AB-">AB-</option>
			<option value="A+">A+</option>
			<option value="A-">A-</option>
			<option value="B+">B+</option>
			<option value="B-">B-</option>
		</select>
	</div>
</div>
<div class="row">
	<div class="col-12">
		<label class="form-label">Age</label>
	</div>
</div>
<div class="row mb-3">
	<div class="col-12">
		<input type="number" class="form-control" @bind="donor.Age">
	</div>
</div>
<div class="row mt-5">
	<div class="col-3">
		<button type="button" style="width:200px" class="btn btn btn-success" @onclick="RegisterDonor">Register</button>
	</div>
	<div class="col-3">
		<button type="button" style="width:200px" class="btn btn btn-primary" @onclick="UpdateDonor">Update database</button>
	</div>
	<div class="col-3">
		<button type="button" style="width:200px" class="btn btn btn-danger" @onclick="DeleteDonor">Delete Info</button>
	</div>
	<div class="col-3">
		<button type="button" style="width:200px" class="btn btn btn-dark" @onclick="clear">Reset</button>
	</div>
</div>


@code {
	Donor donor = new Donor();
	DbmaManager Dbma = new DbmaManager();
	private void clear()
	{
		donor = new Donor();
	}
	private async Task RegisterDonor()
	{
		try
		{
			if (string.IsNullOrEmpty(donor.PhoneNumber) || string.IsNullOrEmpty(donor.Name) ||
			string.IsNullOrEmpty(donor.Gender) || string.IsNullOrEmpty(donor.Address) ||
			string.IsNullOrEmpty(donor.City) || string.IsNullOrEmpty(donor.BloodGroup) || string.IsNullOrEmpty(donor.Age.ToString()))
			{
				throw new InvalidDonorRegisterException("Fill All Fields");
			}
			bool result = await Dbma.RegisterDonorAsync(donor);
			if (result)
			{
				await Application.Current.MainPage.DisplayAlert("Alert", "Registered Successfully", "OK");
			}
			else
			{
				throw new InvalidDonorRegisterException("There was an error try again");
			}
		}
		catch (InvalidDonorRegisterException ex)
		{
			await Application.Current.MainPage.DisplayAlert("Alert", ex.Message, "OK");
		}
		catch (Exception ex)
		{
			await Application.Current.MainPage.DisplayAlert("Alert", $"An error occurred: {ex.Message}", "OK");
		}
	}
	private async Task FetchData()
	{
		try
		{
			if (string.IsNullOrEmpty(donor.PhoneNumber))
			{
				throw new InvalidDonorRegisterException("Please Enter A Phone Number");
			}
			Donor fetchedDonor = await Dbma.FetchDonorAsync(donor.PhoneNumber);
			if (fetchedDonor != null)
			{
				donor = fetchedDonor;
			}
			else
			{
				await Application.Current.MainPage.DisplayAlert("Alert", "No donor found with that phone number.", "OK");
			}
		}
		catch (InvalidDonorRegisterException ex)
		{
			await Application.Current.MainPage.DisplayAlert("Alert", ex.Message, "OK");
		}
		catch (Exception ex)
		{
			await Application.Current.MainPage.DisplayAlert("Alert", $"An error occurred: {ex.Message}", "OK");
		}
	}

	private async Task UpdateDonor()
	{
		try
		{
			if (string.IsNullOrEmpty(donor.PhoneNumber) || string.IsNullOrEmpty(donor.Name) ||
			string.IsNullOrEmpty(donor.Gender) || string.IsNullOrEmpty(donor.Address) ||
			string.IsNullOrEmpty(donor.City) || string.IsNullOrEmpty(donor.BloodGroup) || string.IsNullOrEmpty(donor.Age.ToString()))
			{
				throw new InvalidDonorRegisterException("Fill All Fields");
			}
			bool result = await Dbma.UpdateDonorAsync(donor);
			if (result)
			{
				await Application.Current.MainPage.DisplayAlert("Alert", "Updated Successfully", "OK");
			}
			else
			{
				await Application.Current.MainPage.DisplayAlert("Alert", "Update failed. Please try again. Also Note That Phone Number Cannot be Changed.", "OK");
			}
		}
		catch (InvalidDonorRegisterException ex)
		{
			await Application.Current.MainPage.DisplayAlert("Alert", ex.Message, "OK");
		}
		catch (Exception ex)
		{
			await Application.Current.MainPage.DisplayAlert("Alert", $"An error occurred: {ex.Message}", "OK");
		}
	}

	private async Task DeleteDonor()
	{
		try
		{
			bool result = await Dbma.DeleteDonorAsync(donor.PhoneNumber);
			if (result)
			{
				await Application.Current.MainPage.DisplayAlert("Alert", "Deleted Successfully", "OK");
				clear();
			}
			else
			{
				await Application.Current.MainPage.DisplayAlert("Alert", "Delete failed. Please try again.", "OK");
			}
		}
		catch (Exception ex)
		{
			await Application.Current.MainPage.DisplayAlert("Alert", $"An error occurred: {ex.Message}", "OK");
		}
	}

}